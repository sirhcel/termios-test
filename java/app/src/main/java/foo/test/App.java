/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package foo.test;

import com.fazecast.jSerialComm.SerialPort;
import java.util.Collections;
import java.util.Map;
import java.util.Properties;

public class App {
    public static void printProperties() {
        final Properties properties = System.getProperties();

        System.out.println("system properties:");

        for (Map.Entry<Object, Object> entry: properties.entrySet()) {
            System.out.println("    " + entry.getKey() + ": " + entry.getValue());
        }

    }


    public static void main(String[] args) {
        printProperties();

        final String pattern = " 0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        final byte[] chunk = String.join("", Collections.nCopies(100, pattern)).getBytes();
        final String device = args[0];
        boolean result = false;

        final SerialPort serial = SerialPort.getCommPort(device);
        result = serial.setFlowControl(SerialPort.FLOW_CONTROL_CTS_ENABLED | SerialPort.FLOW_CONTROL_RTS_ENABLED);
        System.out.println("flow control set: " + result);
        result = serial.setComPortParameters(115200, 8, SerialPort.ONE_STOP_BIT, SerialPort.NO_PARITY);
        System.out.println("comm parameters set: " + result);
        result = serial.openPort(80);
        System.out.println("opened: " + result);

        int count = 0;

        while (true) {
            System.out.println("chunk: " + count);
            final int written = serial.writeBytes(chunk, chunk.length);
            if (written != chunk.length) {
                System.out.println("short write: expected " + chunk.length + ", got " + written);
                System.exit(1);
            }
            serial.flushIOBuffers();
            count += 1;
        }
    }
}
